//@version=5
strategy("4H Trend with 1H Entries", overlay=true, initial_capital=10000, default_qty_type=strategy.percent_of_equity, default_qty_value=100)

// === INPUTS ===
// 4H Trend Parameters
slowEMA = input.int(50, "Slow EMA Period (4H)", group="4H Trend")
fastEMA = input.int(20, "Fast EMA Period (4H)", group="4H Trend")

// 1H Entry Parameters
emaFast1h = input.int(6, "EMA Fast (1H)", group="1H Entry")
emaSlow1h = input.int(13, "EMA Slow (1H)", group="1H Entry")

// Risk Management
atrLen = input.int(6, "ATR Length", group="Risk")
slMult = input.float(1.0, "SL Multiplier", step=0.1, group="Risk")
tpMult = input.float(2.0, "TP Multiplier", step=0.1, group="Risk")
minSlPips = input.float(15, "Minimum SL (Pips)", step=1, group="Risk")

// Session overlap times (GMT+7)
tokyoLondonStart = input.int(14, "Tokyo/London Start (GMT+7)", minval=0, maxval=23, group="Session Overlaps")
tokyoLondonEnd = input.int(16, "Tokyo/London End (GMT+7)", minval=0, maxval=23, group="Session Overlaps")
londonNYStart = input.int(19, "London/NY Start (GMT+7)", minval=0, maxval=23, group="Session Overlaps")
londonNYEnd = input.int(23, "London/NY End (GMT+7)", minval=0, maxval=23, group="Session Overlaps")

// === TIME FILTER ===
hour_ = hour(time, "GMT+7")
minute_ = minute(time, "GMT+7")
inTokyoLondon = hour_ >= tokyoLondonStart and hour_ < tokyoLondonEnd
inLondonNY = hour_ >= londonNYStart and hour_ < londonNYEnd
inSession = inTokyoLondon or inLondonNY

// === 4H TREND DETECTION ===
[ema20_4h, ema50_4h] = request.security(syminfo.tickerid, "240", [ta.ema(close, fastEMA), ta.ema(close, slowEMA)])
isUptrend = ema20_4h > ema50_4h
isDowntrend = ema20_4h < ema50_4h

// === 1H ENTRY SIGNALS ===
[ema9_1h, ema21_1h] = request.security(syminfo.tickerid, "60", [ta.ema(close, emaFast1h), ta.ema(close, emaSlow1h)])
emaBull = ta.crossover(ema9_1h, ema21_1h)
emaBear = ta.crossunder(ema9_1h, ema21_1h)
priceUp = close > close[1] and close[1] > close[2]
priceDown = close < close[1] and close[1] < close[2]

// Combine 4H trend with 1H signals
longCondition = isUptrend and emaBull and priceUp and inSession
shortCondition = isDowntrend and emaBear and priceDown and inSession

// === SL/TP ===
atr = ta.atr(atrLen)
minSL = minSlPips * 0.0001
slValue = math.min(atr * slMult, minSL)
tpValue = slValue * tpMult

// === TRADE EXECUTION ===
var float entryPrice = na
var int entryBar = 0
var bool canExit = false
var float slPrice = na
var float tpPrice = na

if longCondition and strategy.position_size == 0
    entryPrice := close
    entryBar := bar_index
    canExit := false
    slPrice := entryPrice - slValue
    tpPrice := entryPrice + tpValue
    strategy.entry("Long", strategy.long, limit=entryPrice)

if shortCondition and strategy.position_size == 0
    entryPrice := close
    entryBar := bar_index
    canExit := false
    slPrice := entryPrice + slValue
    tpPrice := entryPrice - tpValue
    strategy.entry("Short", strategy.short, limit=entryPrice)

// Update canExit flag after 1 bar (1 hour)
if bar_index > entryBar
    canExit := true

// Exit conditions
if canExit and strategy.position_size > 0
    strategy.exit("Long Exit", "Long", stop=entryPrice - slValue, limit=entryPrice + tpValue)

if canExit and strategy.position_size < 0
    strategy.exit("Short Exit", "Short", stop=entryPrice + slValue, limit=entryPrice - tpValue)

// === PLOTS ===
plot(ema20_4h, "4H EMA 20", color=color.blue, linewidth=2)
plot(ema50_4h, "4H EMA 50", color=color.red, linewidth=2)
plot(ema9_1h, "1H EMA 9", color=color.lime)
plot(ema21_1h, "1H EMA 21", color=color.orange)

// Plot signals
plotshape(longCondition, title="Long Signal", location=location.belowbar, style=shape.triangleup, color=color.lime)
plotshape(shortCondition, title="Short Signal", location=location.abovebar, style=shape.triangledown, color=color.red)

// Add labels for Entry/SL/TP
if longCondition
    label.new(bar_index, low, "Entry: " + str.tostring(entryPrice, "#.####") + "\nSL: " + str.tostring(slPrice, "#.####") + "\nTP: " + str.tostring(tpPrice, "#.####"), color=color.lime, style=label.style_label_up, textcolor=color.white)

if shortCondition
    label.new(bar_index, high, "Entry: " + str.tostring(entryPrice, "#.####") + "\nSL: " + str.tostring(slPrice, "#.####") + "\nTP: " + str.tostring(tpPrice, "#.####"), color=color.red, style=label.style_label_down, textcolor=color.white)

alertcondition(longCondition, title="Long Alert", message="Long scalp condition met")
alertcondition(shortCondition, title="Short Alert", message="Short scalp condition met")




